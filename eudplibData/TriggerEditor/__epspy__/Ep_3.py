## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.epscript.helper import _RELIMP, _IGVA, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LVAR, _LSH
# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import TriggerEditor.WorkSpace.MulticastMC as MCC;
from TriggerEditor.WorkSpace import MulticastMC as MCC
# (Line 3) const displaytext = StringBuffer();
displaytext = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) const Buffer1 = [0,0,0,0,0,0,0,0];
Buffer1 = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 6) var sg1;
sg1 = EUDVariable()
# (Line 7) var sg2;
sg2 = EUDVariable()
# (Line 8) var sg3;
sg3 = EUDVariable()
# (Line 9) var glhf;
glhf = EUDVariable()
# (Line 10) const Pexist =[0,0,0,0,0,0,0,0];
Pexist = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 11) const Pspawner = [ 69,58,47,36,25,14,73,82 ];
Pspawner = _CGFW(lambda: [_ARR(FlattenList([69, 58, 47, 36, 25, 14, 73, 82]))], 1)[0]
# (Line 12) function beforeTriggerExec(){
@EUDFunc
def beforeTriggerExec():
    # (Line 15) MCC.MulticastMoveCommand();
    MCC.MulticastMoveCommand()
    # (Line 16) if(!msqcvar.VKeyPress_LSHIFT[0]&& msqcvar.VKeyDown_X[0]){CreateUnitWithProperties(1,176,248,P1,UnitProperty(resource=150));}
    if EUDIf()(EUDSCAnd()(msqcvar.VKeyPress_LSHIFT[0], neg=True)(msqcvar.VKeyDown_X[0])()):
        DoActions(CreateUnitWithProperties(1, 176, 248, P1, UnitProperty(resource=150)))
        # (Line 21) foreach(player : EUDLoopPlayer()){
    EUDEndIf()
    for player in EUDLoopPlayer():
        # (Line 22) if(Buffer1[player]>= 2){Buffer1[player]-= 1;}
        if EUDIf()(_ARRC(Buffer1, player) >= 2):
            _ARRW(Buffer1, player).__isub__(1)
            # (Line 23) if(msqcvar.VKeyPress_LSHIFT[player]&& msqcvar.VKeyDown_X[0]){CreateUnit(1,84,248,player);}
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(msqcvar.VKeyPress_LSHIFT[player])(msqcvar.VKeyDown_X[0])()):
            DoActions(CreateUnit(1, 84, 248, player))
            # (Line 24) settblf((1160+player), 0, "/x Current:[{:s}] \n      Assign your  \n Multi-Cast  Command \n  \x1f    A\x04mped\x01 Extra Key   ",MCC.MCcKey[MCC.Gsync[0]] );
        EUDEndIf()
        f_settblf((1160 + player), 0, "/x Current:[{:s}] \n      Assign your  \n Multi-Cast  Command \n  \x1f    A\x04mped\x01 Extra Key   ", MCC.MCcKey[MCC.Gsync[0]])
        # (Line 27) }
        # (Line 32) if(glhf>=1){glhf-=1;}

    if EUDIf()(glhf >= 1):
        glhf.__isub__(1)
        # (Line 33) once{
    EUDEndIf()
    _t5 = EUDExecuteOnce()
    if _t5():
        # (Line 35) glhf=10; MCC.Gsync[0]=26;MCC.Gsync[1]=26;MCC.Gsync[2]=26;MCC.Gsync[3]=26;
        glhf << (10)
        _ARRW(MCC.Gsync, 0) << (26)
        _ARRW(MCC.Gsync, 1) << (26)
        _ARRW(MCC.Gsync, 2) << (26)
        _ARRW(MCC.Gsync, 3) << (26)
        # (Line 37) }
        # (Line 38) if(glhf==9){
    EUDEndExecuteOnce()
    if EUDIf()(glhf == 9):
        # (Line 39) if(playerexist(P1)){
        if EUDIf()(f_playerexist(P1)):
            # (Line 41) Pexist[0]=1;
            _ARRW(Pexist, 0) << (1)
            # (Line 42) if(Pexist[0]==1){
            if EUDIf()(_ARRC(Pexist, 0) == 1):
                # (Line 43) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 44) CreateUnit(13,219,Pspawner[0],0);
                # (Line 45) wwrite(0x66EC48 + 583 * 4, 332);
                DoActions(CreateUnit(13, 219, Pspawner[0], 0))
                f_wwrite(0x66EC48 + 583 * 4, 332)
                # (Line 46) foreach ( epd: EUDLoopCUnit ()){
                for epd in EUDLoopCUnit():
                    # (Line 47) if (epd.unitType==219 && epd.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd, 'unitType') == 219)(_ATTC(epd, 'unknown0x8C') == 0)()):
                        # (Line 48) var i;
                        i = EUDVariable()
                        # (Line 49) epd.remove_collision();
                        epd.remove_collision()
                        # (Line 50) MCC.uGcursorplayer[i]= epd;
                        _ARRW(MCC.uGcursorplayer, i) << (epd)
                        # (Line 51) i++;
                        i.__iadd__(1)
                        # (Line 52) epd.unknown0x8C += i;
                        _ATTW(epd, 'unknown0x8C').__iadd__(i)
                        # (Line 53) }
                        # (Line 54) }
                    EUDEndIf()
                    # (Line 55) }

                # (Line 56) }
            EUDEndIf()
            # (Line 57) }
        EUDEndIf()
        # (Line 58) if(glhf==8){
    EUDEndIf()
    if EUDIf()(glhf == 8):
        # (Line 59) if(playerexist(P2)){
        if EUDIf()(f_playerexist(P2)):
            # (Line 61) Pexist[1]=1;
            _ARRW(Pexist, 1) << (1)
            # (Line 62) if(Pexist[1]==1){
            if EUDIf()(_ARRC(Pexist, 1) == 1):
                # (Line 64) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 65) CreateUnit(13,219,Pspawner[1],1);
                # (Line 67) foreach ( epd1: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[1], 1))
                for epd1 in EUDLoopCUnit():
                    # (Line 68) if (epd1.unitType==219 && epd1.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd1, 'unitType') == 219)(_ATTC(epd1, 'unknown0x8C') == 0)()):
                        # (Line 69) var i1;
                        i1 = EUDVariable()
                        # (Line 70) epd1.remove_collision();
                        epd1.remove_collision()
                        # (Line 71) MCC.uGcursorplayer2[i1]= epd1;
                        _ARRW(MCC.uGcursorplayer2, i1) << (epd1)
                        # (Line 72) i1++;
                        i1.__iadd__(1)
                        # (Line 73) epd1.unknown0x8C += i1;
                        _ATTW(epd1, 'unknown0x8C').__iadd__(i1)
                        # (Line 74) }
                        # (Line 75) }
                    EUDEndIf()
                    # (Line 78) }

                # (Line 79) }
            EUDEndIf()
            # (Line 80) }
        EUDEndIf()
        # (Line 81) if(glhf==7){
    EUDEndIf()
    if EUDIf()(glhf == 7):
        # (Line 82) if(playerexist(P3 )){
        if EUDIf()(f_playerexist(P3)):
            # (Line 84) Pexist[2]=1;
            _ARRW(Pexist, 2) << (1)
            # (Line 85) if(Pexist[2]==1){
            if EUDIf()(_ARRC(Pexist, 2) == 1):
                # (Line 87) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 88) CreateUnit(13,219,Pspawner[2],2);
                # (Line 91) foreach ( epd2: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[2], 2))
                for epd2 in EUDLoopCUnit():
                    # (Line 92) if (epd2.unitType==219 && epd2.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd2, 'unitType') == 219)(_ATTC(epd2, 'unknown0x8C') == 0)()):
                        # (Line 93) var i2;
                        i2 = EUDVariable()
                        # (Line 94) epd2.remove_collision();
                        epd2.remove_collision()
                        # (Line 95) MCC.uGcursorplayer3[i2]= epd2;
                        _ARRW(MCC.uGcursorplayer3, i2) << (epd2)
                        # (Line 96) i2++;
                        i2.__iadd__(1)
                        # (Line 97) epd2.unknown0x8C += i2;
                        _ATTW(epd2, 'unknown0x8C').__iadd__(i2)
                        # (Line 98) }
                        # (Line 99) }
                    EUDEndIf()
                    # (Line 101) }

                # (Line 103) }
            EUDEndIf()
            # (Line 104) }
        EUDEndIf()
        # (Line 105) if(glhf==6){
    EUDEndIf()
    if EUDIf()(glhf == 6):
        # (Line 106) if(playerexist(P4)){
        if EUDIf()(f_playerexist(P4)):
            # (Line 108) Pexist[3]=1 ;
            _ARRW(Pexist, 3) << (1)
            # (Line 109) if(Pexist[3]==1){
            if EUDIf()(_ARRC(Pexist, 3) == 1):
                # (Line 111) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 112) CreateUnit(13,219,Pspawner[3],3);
                # (Line 114) foreach ( epd3: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[3], 3))
                for epd3 in EUDLoopCUnit():
                    # (Line 115) if (epd3.unitType==219 && epd3.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd3, 'unitType') == 219)(_ATTC(epd3, 'unknown0x8C') == 0)()):
                        # (Line 116) var i3;
                        i3 = EUDVariable()
                        # (Line 117) epd3.remove_collision();
                        epd3.remove_collision()
                        # (Line 118) MCC.uGcursorplayer4[i3]= epd3;
                        _ARRW(MCC.uGcursorplayer4, i3) << (epd3)
                        # (Line 119) i3++;
                        i3.__iadd__(1)
                        # (Line 120) epd3.unknown0x8C += i3;
                        _ATTW(epd3, 'unknown0x8C').__iadd__(i3)
                        # (Line 121) }
                        # (Line 122) }
                    EUDEndIf()
                    # (Line 123) }

                # (Line 126) }
            EUDEndIf()
            # (Line 127) }
        EUDEndIf()
        # (Line 128) if(glhf==5){
    EUDEndIf()
    if EUDIf()(glhf == 5):
        # (Line 129) if(playerexist(P5)){
        if EUDIf()(f_playerexist(P5)):
            # (Line 130) Pexist[4]=1 ;
            _ARRW(Pexist, 4) << (1)
            # (Line 131) if(Pexist[4]==1){
            if EUDIf()(_ARRC(Pexist, 4) == 1):
                # (Line 133) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 134) CreateUnit(13,219,Pspawner[4],4);
                # (Line 136) foreach ( epd4: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[4], 4))
                for epd4 in EUDLoopCUnit():
                    # (Line 137) if (epd4.unitType==219 && epd4.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd4, 'unitType') == 219)(_ATTC(epd4, 'unknown0x8C') == 0)()):
                        # (Line 138) var i4;
                        i4 = EUDVariable()
                        # (Line 139) epd4.remove_collision();
                        epd4.remove_collision()
                        # (Line 140) MCC.uGcursorplayer5[i4]= epd4;
                        _ARRW(MCC.uGcursorplayer5, i4) << (epd4)
                        # (Line 141) i4++;
                        i4.__iadd__(1)
                        # (Line 142) epd4.unknown0x8C += i4;
                        _ATTW(epd4, 'unknown0x8C').__iadd__(i4)
                        # (Line 143) }
                        # (Line 144) }
                    EUDEndIf()
                    # (Line 145) }

                # (Line 148) }
            EUDEndIf()
            # (Line 149) }
        EUDEndIf()
        # (Line 150) if(glhf==4){
    EUDEndIf()
    if EUDIf()(glhf == 4):
        # (Line 151) if(playerexist(P6)){
        if EUDIf()(f_playerexist(P6)):
            # (Line 152) Pexist[5]=1 ;
            _ARRW(Pexist, 5) << (1)
            # (Line 153) if(Pexist[5]==1){
            if EUDIf()(_ARRC(Pexist, 5) == 1):
                # (Line 155) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 156) CreateUnit(13,219,Pspawner[5],5);
                # (Line 157) foreach ( epd5: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[5], 5))
                for epd5 in EUDLoopCUnit():
                    # (Line 158) if (epd5.unitType==219 && epd5.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd5, 'unitType') == 219)(_ATTC(epd5, 'unknown0x8C') == 0)()):
                        # (Line 159) var i5;
                        i5 = EUDVariable()
                        # (Line 160) epd5.remove_collision();
                        epd5.remove_collision()
                        # (Line 161) MCC.uGcursorplayer6[i5]= epd5;
                        _ARRW(MCC.uGcursorplayer6, i5) << (epd5)
                        # (Line 162) i5++;
                        i5.__iadd__(1)
                        # (Line 163) epd5.unknown0x8C += i5;
                        _ATTW(epd5, 'unknown0x8C').__iadd__(i5)
                        # (Line 164) }
                        # (Line 165) }
                    EUDEndIf()
                    # (Line 167) }

                # (Line 168) }
            EUDEndIf()
            # (Line 169) }
        EUDEndIf()
        # (Line 170) if(glhf==3){
    EUDEndIf()
    if EUDIf()(glhf == 3):
        # (Line 171) if(playerexist(P7)){
        if EUDIf()(f_playerexist(P7)):
            # (Line 172) Pexist[6]=1 ;
            _ARRW(Pexist, 6) << (1)
            # (Line 173) if(Pexist[6]==1){
            if EUDIf()(_ARRC(Pexist, 6) == 1):
                # (Line 174) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 175) CreateUnit(13,219,Pspawner[6],6);
                # (Line 176) foreach ( epd6: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[6], 6))
                for epd6 in EUDLoopCUnit():
                    # (Line 177) if (epd6.unitType==219 && epd6.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd6, 'unitType') == 219)(_ATTC(epd6, 'unknown0x8C') == 0)()):
                        # (Line 178) var i6;
                        i6 = EUDVariable()
                        # (Line 179) epd6.remove_collision();
                        epd6.remove_collision()
                        # (Line 180) MCC.uGcursorplayer7[i6]= epd6;
                        _ARRW(MCC.uGcursorplayer7, i6) << (epd6)
                        # (Line 181) i6++;
                        i6.__iadd__(1)
                        # (Line 182) epd6.unknown0x8C += i6;
                        _ATTW(epd6, 'unknown0x8C').__iadd__(i6)
                        # (Line 183) }
                        # (Line 184) }
                    EUDEndIf()
                    # (Line 185) }

                # (Line 188) }
            EUDEndIf()
            # (Line 189) }
        EUDEndIf()
        # (Line 190) if(glhf==2){
    EUDEndIf()
    if EUDIf()(glhf == 2):
        # (Line 191) if(playerexist(P8)){
        if EUDIf()(f_playerexist(P8)):
            # (Line 192) Pexist[7]=1 ;
            _ARRW(Pexist, 7) << (1)
            # (Line 193) if(Pexist[7]==1){
            if EUDIf()(_ARRC(Pexist, 7) == 1):
                # (Line 194) wwrite(0x66EC48 + 583 * 4, 309);
                f_wwrite(0x66EC48 + 583 * 4, 309)
                # (Line 195) CreateUnit(13,219,Pspawner[7],7);
                # (Line 196) foreach ( epd7: EUDLoopCUnit ()){
                DoActions(CreateUnit(13, 219, Pspawner[7], 7))
                for epd7 in EUDLoopCUnit():
                    # (Line 197) if (epd7.unitType==219 && epd7.unknown0x8C == 0 ){
                    if EUDIf()(EUDSCAnd()(_ATTC(epd7, 'unitType') == 219)(_ATTC(epd7, 'unknown0x8C') == 0)()):
                        # (Line 198) var i7;
                        i7 = EUDVariable()
                        # (Line 199) epd7.remove_collision();
                        epd7.remove_collision()
                        # (Line 200) MCC.uGcursorplayer8[i7]= epd7;
                        _ARRW(MCC.uGcursorplayer8, i7) << (epd7)
                        # (Line 201) i7++;
                        i7.__iadd__(1)
                        # (Line 202) epd7.unknown0x8C += i7;
                        _ATTW(epd7, 'unknown0x8C').__iadd__(i7)
                        # (Line 203) }
                        # (Line 204) }
                    EUDEndIf()
                    # (Line 205) }

                # (Line 207) }
            EUDEndIf()
            # (Line 209) wwrite(0x66EC48 + 583 * 4, 332);
        EUDEndIf()
        f_wwrite(0x66EC48 + 583 * 4, 332)
        # (Line 212) }
        # (Line 227) }
    EUDEndIf()
    # (Line 231) function onPluginStart(){

@EUDFunc
def onPluginStart():
    # (Line 233) }
    # (Line 234) function afterTriggerExec(){
    pass

@EUDFunc
def afterTriggerExec():
    # (Line 236) }
    pass
